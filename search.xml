<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList和LinkedList的区别</title>
    <url>/2021/06/26/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>Java扩展</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>区别</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之流量控制和拥塞控制</title>
    <url>/2021/07/02/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>莫愁前路无知己，天下谁人不识君。——《别董大二首》唐<strong>·</strong>高适</p>
</blockquote>
<span id="more"></span>

<h5 id="滑动窗口发送数据"><a href="#滑动窗口发送数据" class="headerlink" title="滑动窗口发送数据"></a>滑动窗口发送数据</h5><p>滑动窗口是以字节为单位发送数据。</p>
<p>通过窗口的滑动来高效的发送数据到缓存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/slidingWindow.png"></p>
<h5 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h5><h6 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h6><p><strong>流量控制</strong>即为让发送方发送数据不要太快，要让接收方来得及处理。</p>
<p>当发送方与接收方在建立连接之初就会协商一个发送窗口值s和接收窗口值r（通常s&lt;=r，<font color = "red">单位是字节</font>）。当接收方发现发送来的数据丢失就会缩小接收窗口，当接收窗口的缓存已被数据填满，那么就不会允许再次发来数据，并置接收窗口值为<font color = "red">0</font>。</p>
<p>此刻，可能会出现<strong>死锁</strong>情况：当接收窗口被置为0后，接收端处理了缓存中的数据，再次发送一个大于0的窗口值给发送端，<font color="red">若是</font>该报文段丢失了，那么会出现相互等待的情况，即发送端等待接收端发送一个不为0的报文段，而接收端等待发送端发送数据，由此形成了死锁。</p>
<p>为解决该问题TCP使用了<strong>接收持续计时器</strong>，即连接中的一方收到0窗口值后就会启动该计时器，计时器满，就会发送一个试探报文段（它只携带一个字节数据），若另一方收到该报文段就会发送给对方自己现在的窗口值，若窗口值还是0，那么重置计时器，若不是，则继续发送数据，死锁打破。</p>
<h6 id="TCP的传输效率"><a href="#TCP的传输效率" class="headerlink" title="TCP的传输效率"></a>TCP的传输效率</h6><p>未完待续。。。。。。</p>
<h5 id="流量控制和拥塞控制的区别"><a href="#流量控制和拥塞控制的区别" class="headerlink" title="流量控制和拥塞控制的区别"></a>流量控制和拥塞控制的区别</h5><p>拥塞控制是控制整个输入网络中的数据，使路由器和链路中的负荷不至于过载；流量控制是减少发送端发送数据的速率，是接收端来得及处理。</p>
<p><strong>范围不同</strong></p>
<p>流量控制针对的是TCP连接的两端，而拥塞控制针对的是整个互联网络，包括所有的路由器和主机。</p>
<h5 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h5><h6 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h6><p><strong>什么是网络拥塞？</strong></p>
<p>某段时间内对网络中的某种资源的需求大于它能提供的资源数量，就会产生网络拥塞，当网络中许多资源同时产生拥塞，网络吞吐量量就会产生明显下降。</p>
<p>实践证明，拥塞控制是很难设计的，因为它是一个动态的（而不是静态的）问题。当前网络正朝着高速化的方向发展，这很容易出现缓存不够大而造成分组的丢失。但<font color = "blue">分组的丢失是网络发生拥塞的征兆而不是原因</font>。在许多情况下，甚至<font color = "red">正是拥塞控制本身成为引起网络性能恶化甚至发生死锁的原因</font>。这点应特别引起重视。 </p>
<h6 id="开环控制和闭环控制"><a href="#开环控制和闭环控制" class="headerlink" title="开环控制和闭环控制"></a>开环控制和闭环控制</h6><p><strong>开环控制</strong></p>
<p>在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不产生拥塞。 </p>
<p><strong>闭环控制</strong></p>
<p>基于反馈环路的概念。属于闭环控制的有以下几种措施：<br>        (1) 监测网络系统以便检测到拥塞在何时、何处发生。<br>        (2) 将拥塞发生的信息传送到可采取行动的地方。<br>        (3) 调整网络系统的运行以解决出现的问题。</p>
<h6 id="检测网络拥塞的指标"><a href="#检测网络拥塞的指标" class="headerlink" title="检测网络拥塞的指标"></a>检测网络拥塞的指标</h6><p>由于缺少缓存空间而被丢弃的分组的百分数；</p>
<p>平均队列长度；</p>
<p>超时重传的分组数；</p>
<p>平均分组时延；</p>
<p>分组时延的标准差，等等</p>
<h6 id="拥塞控制的判断"><a href="#拥塞控制的判断" class="headerlink" title="拥塞控制的判断"></a>拥塞控制的判断</h6><p>1 重传计时器超时</p>
<p>2 收到三个重复的确认</p>
<h6 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a>拥塞控制算法</h6><p><strong>控制方法</strong></p>
<p>TCP采用基于窗口的拥塞控制，该方法属于闭环控制。TCP发送端将会维持一个拥塞窗口（cwnd），该窗口大小取决于网络拥塞程度。实际值=Min(公告窗口值，拥塞窗口值)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/CongestionControlExample.png"></p>
<center><font size=2>图1 拥塞控制举例</font></center>

<p><strong>慢开始算法</strong></p>
<p>思路：将会由小到大增加拥塞窗口的数值。呈指数级增长，所以增加很快。</p>
<p>cwnd：通常会把初始拥塞窗口值设为不超过2到4个最大报文段（SMSS）值。</p>
<p>ssthresh：慢开始门限，是为了防止拥塞窗口过大引起网络拥堵</p>
<p>拥塞窗口控制：在每收到一个对新的报文段的确认后（不算重传，即每经过一个传输伦次后就加倍），可以把拥塞窗口增加最多一个 SMSS 的数值。（通常增加原来的2倍数）</p>
<p>传输伦次：一个传输伦次就是往返时间RTT，“一轮”是指把拥塞窗口所允许的报文数都连续发传去。</p>
<p>拥塞窗口cwnd每次的增加量 = min (N, SMSS)</p>
<p>其中 N 是原先未被确认的、但现在被刚收到的确认报文段所确认的字节数。不难看出，当 N &lt; SMSS 时，拥塞窗口每次的增加量要小于 SMSS。用这样的方法逐步增大发送方的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。</p>
<p><strong>拥塞避免算法</strong></p>
<p>当拥塞窗口cwnd&gt;=ssthresh门限值时，就会开始执行拥塞避免算法</p>
<p>思路：让拥塞窗口<font color="blue">缓慢增大</font>，这个时候不是加倍，而是只<font color="red">加一</font>.</p>
<p>此时也处于“加法增大”阶段</p>
<p><strong>无论在慢开始还是拥塞避免阶段，当出现<font color="red">超时重传</font>时，就会执行慢开始算法</strong></p>
<p>ssthresh = max(cwnd/2，2)<br>        cwnd = 1<br>        执行慢开始算法<br>        这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p>
<p><strong>当<font color = "red">连续收到三个重复确认</font>时就会执行快重传/快恢复算法</strong></p>
<p><strong>快重传算法</strong></p>
<p>采用快重传FR (Fast Retransmission) 算法可以让发送方尽早知道发生了个别报文段的丢失。<br>快重传 算法首先要求接收方不要等待自己（接收方）发送数据时才进行捎带确认，而是要立即发送确认，即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。</p>
<p>发送方只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传（即“快重传”），这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。</p>
<p><strong>快恢复算法</strong></p>
<p>当发送端收到连续三个重复的确认时，由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是执行快恢复算法 FR (Fast Recovery) 算法：<br>    (1) 慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2 ；<br>    (2) 新拥塞窗口 cwnd = 慢开始门限 ssthresh ；<br>    (3) 开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。 </p>
<h6 id="拥塞控制流程图"><a href="#拥塞控制流程图" class="headerlink" title="拥塞控制流程图"></a>拥塞控制流程图</h6><p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/TCPCongestionControlProcess.png"></p>
<center><font size=2>图2 拥塞控制流程图</font></center>

<p>这一节学得不是很好，待后来慢慢体会和感悟，加油！</p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>流量控制与拥塞控制</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>流量控制</tag>
        <tag>拥塞控制</tag>
      </tags>
  </entry>
  <entry>
    <title>一起学习HashMap</title>
    <url>/2021/05/16/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>绕树三匝，何枝可依。——曹操《短歌行》</p>
</blockquote>
<h6 id="HashMap是什么？"><a href="#HashMap是什么？" class="headerlink" title="HashMap是什么？"></a>HashMap是什么？</h6><p>HashMap是基于哈希表实现了Map接口的一个类，它不是线程安全的，即不是同步的。是一种存储键值对的集合，它允许null值和null键，它可以根据给定的key通过哈希函数计算得到存储的位置。</p>
<p>HashMap默认初始容量一般是16，默认负载因子是0.75，当散列表中的数目超过容量的75%时，散列表将会重建为原来的两倍，通过包含两个步骤，即重新开辟空间和重新计算散列。</p>
<span id="more"></span>

<p><strong>为什么默认初始容量是16，默认负载因子是0.75？</strong></p>
<p>默认初始容量16更加符合hash算法的均匀分布原则，倘若是其他则会更加容易引起哈希冲突。负载因子是综合考虑了时间与空间成本的良好折中，更高会降低空间成本，但会增加查找开销（包括put和get）。</p>
<h6 id="HashMap的put与get方法"><a href="#HashMap的put与get方法" class="headerlink" title="HashMap的put与get方法"></a><strong>HashMap的put与get方法</strong></h6><p><strong>put</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;<span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>当我们调用put方法，传入key和value时，该类又调用了putVal方法，并传入相关参数，其中hash(key)方法源码是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，hash方法是计算我们传入put方法key的哈希码，若key为null则哈希值为0，否则获取key的哈希码并将它与它无符号右移16位后的值做异或运算（无符号右移：高位用<font color='red'>0</font>补，右移；异或运算：相异为1，相同为0）。即首先需要计算key的哈希值。</p>
<p>putVal的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 首先判断tab是否初始化，若没有则先调用resize()进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/*若已经初始化，首先将key的哈希码与(n-1)做与运算，得到i值指向已有散列表中的某个对象，</span></span><br><span class="line"><span class="comment">    判断该指向是否为空，若为空直接将key对应的value存在这里*/</span></span><br><span class="line">    <span class="comment">/*此处i = (n-1) &amp; hash，是基于数据结构之散列函数设计方法除留余数法的改进，</span></span><br><span class="line"><span class="comment">      除留余数法是指关键码key mod p 得到散列地址，p是适当正整数，这里是n-1，即散列表长度减一，</span></span><br><span class="line"><span class="comment">     （为什么要减一后面再聊），通过这样设计散列函数得到的散列地址更加随机，更加不会引起冲突*/</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 判断我要存入的键值对与该散列地址已有的键值对是否相同(先后比较了两个对象key的哈希值和key的地址)，若相同，直接将该键值对赋给我们要插入的键值对</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)  <span class="comment">// 判断已存在Hash中p是否为TreeNode类型，若是调用putTreeVal插入数据</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 此时仅剩要插入的与原有的不一样需要插入数据，于是开始查找该位置 链 上的空位置 </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 若找到空位置，将我们要插入的键值对存储在这里</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);<span class="comment">// 若链表到了规定阈值，使用红黑树存储</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 重复上述判断是否要存入的和已有的相同，若是算已经存储，退出</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;<span class="comment">// 继续查找空位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过以上不断查找后存储，若e != null，说明我们要插入的数据已经存好了，最后更新相应的value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount; <span class="comment">// 记录HashMap内部结构修改次数</span></span><br><span class="line">    <span class="comment">// 判断插入后的大小是否超过阈值，若超过需要扩容处理</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>get</strong></p>
<p>get源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，我们是通过给出key而获取value值，首先也是与put方法一样获取key的哈希码，然后调用getNode方法获取对应的Node对象，判断对象是否为空，若为空则返回空，否则返回我们所需要的value值。接下来看看getNode方法的源码，瞅瞅它是如何通过key获取到与key对应的node对象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">/* 首先就是判断node列表是否为空（table是已有的存有node对象的列表），再判断列表长度是否大于0，</span></span><br><span class="line"><span class="comment">    然后通过（(n-1) &amp; hash）（上面有介绍到）获得key对应的散列地址，通过该散列地址得到对应的node，</span></span><br><span class="line"><span class="comment">    判断该node是否为空。 */</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* first是指node列表中某个node链表的头节点 */</span></span><br><span class="line">        <span class="comment">/* 首先判断头节点的hash是否是我们要找的hash，然后判断头节点的key是否是我们想要找的key，</span></span><br><span class="line"><span class="comment">        或者另一种情况，key不为空的情况下判断我们给的key和头节点的key内容上是否相等 </span></span><br><span class="line"><span class="comment">        (这里是区别equals和==吗？没有太读懂。。。)*/</span> </span><br><span class="line">        <span class="comment">// 若满足条件直接返回头节点，即可得到想要的value</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">/* 若是没有在头节点找到想要的，则循着链表依次往下找，首先判断头节点的下一节点是否为空 */</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断头节点是否是红黑树的实例，若是则通过数查找，否则通过链表依次查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结与体会</strong></p>
<p>HashMap的key与value是通过“中介”node去存储相应的key和value的，存储方式通过散列函数(n-1) &amp; key，这样得到的地址减少了地址冲突，有益于存储。再有就是对相同额的散列地址是通过链表额的形式存储，通过指针next去加或找相应的node，也存在通过红黑树作为相同散列地址存储方式的（但是我对这个不熟悉，因此没有深入的分析，记住教训，即将学习它）。emmm。。。还有很多。希望自己多多读源码，找到感觉，再接再厉！</p>
<p>第一次读源码，读得很吃力，有很多不足之处，请多多指教！阿里嘎多^_^</p>
<h6 id="HashMap高并发下引起的死锁"><a href="#HashMap高并发下引起的死锁" class="headerlink" title="HashMap高并发下引起的死锁"></a>HashMap高并发下引起的死锁</h6><p>前面有聊到HashMap的默认负载因子是0.75，这是因为HashMap的容量达到这个阈值会增加哈希冲突，于是就有了扩容rehash这个动作。扩容是扩充到原来的两倍，扩充动作是<font color = "red">两步</font>，首先扩充entry数组到原来的两倍，然后再重新hash原来的map到新的entry，<font color = "red" >此时需要重新计算散列地址，因为长度变了</font>。由于HashMap并非线程安全的，于是当重新hash时，便可能会引起线程死锁。</p>
<p>具体来说是：</p>
<p><a href="https://juejin.cn/post/6844903518331994119">请看大佬^_*^</a>，我的理解是当我们重新计算哈希时，由于相同位置的node链表形成了循环链表，当查找该位置的node值为null时，就会不断查找，于是形成了死锁。</p>
<p>对于该死锁，大佬的解决方案是使用另一个集合类ConcurrentHashMap，该类兼顾了线程安全和性能。通过学习<a href="https://juejin.cn/post/6844904121468715021">该文章</a>，我的理解是jdk1.7是在插入时通过该类继承ReentranLock类而使用类方法加锁的方式去对插入的node进行同步控制，而jdk1.8是对代码块使用synchronized关键字进行同步控制。</p>
<p>关于ConcurrentHashMap的深入研究被挂起，等到进一步源码学习^%_*^</p>
]]></content>
      <categories>
        <category>Java扩展</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>java引用理解</title>
    <url>/2021/04/05/</url>
    <content><![CDATA[<hr>
<h6 id="强引用（Strong-Reference"><a href="#强引用（Strong-Reference" class="headerlink" title="强引用（Strong Reference)"></a>强引用（Strong Reference)</h6><p>最常见，仅包内可见。其他三种是public，能在程序中直接使用，因此在垃圾回收时会尝试只回收只有弱引用的对象。</p>
<h6 id="软引用-Soft-Reference"><a href="#软引用-Soft-Reference" class="headerlink" title="软引用(Soft Reference)"></a>软引用(Soft Reference)</h6><p>在JVM抛出OOM之前，GC需要根据算法检查决定回收软引用，会尽量让其存活更长的时间。</p>
<h6 id="弱引用-Weak-Reference"><a href="#弱引用-Weak-Reference" class="headerlink" title="弱引用(Weak Reference)"></a>弱引用(Weak Reference)</h6><p>GC会首先回收该类引用对象进行回收，甚至于进行多次GC回收。更加容易、更快被回收。</p>
<h6 id="虚引用-Phantom-Reference"><a href="#虚引用-Phantom-Reference" class="headerlink" title="虚引用(Phantom Reference)"></a>虚引用(Phantom Reference)</h6><p><em>又称为幽灵引用，主要目的是在一个对象所占的内存被实际回收之前得到通知， 从而可以进行一些相关的清理工作。幽灵引用在使用方式上与之前介绍的三种引用类型有很大的不同。首先幽灵引用在创建时必须提供一个引用队列作为参数，其次幽灵引用对象的 get 方法总是返回 null ， 因此无法通过幽灵引用来获取被引用 的对象。</em></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字节码执行机制</title>
    <url>/2021/06/25/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>Java字节码执行机制</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java字节码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础查漏补缺</title>
    <url>/2021/06/26/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>子曰：“ 温故而知新，可以为师矣！” ——《论语<strong>·</strong>为政篇》</p>
</blockquote>
<h5 id="Java概述篇"><a href="#Java概述篇" class="headerlink" title="Java概述篇"></a>Java概述篇</h5><p>1 Java是解释性语言，针对字节码文件（.class）解释执行，这就大大提高了程序的可移植性，而非像C/C++一样需要编译成二进制文件执行。</p>
<p>2 jdk包含了JRE，javac.exe和java.exe以及Java其他所需工具，包括文档等。</p>
<span id="more"></span>

<p>3 浮点类型数据，float类型能保证的精度为6位，即有效数字范围是6<del>7位，而double类型是15</del>16位。这是由于浮点数在计算机中的保存方式决定的。</p>
<p>4 Unicode字符集的范围是”\u0000 ~ \uffff”，\u表使用Unicode编码，后四位十六进制，占两字节，共包含65535个字符。</p>
<h5 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h5><p>1 switch语句所允许的类型有byte，short，int，long，char和String等引用类型。</p>
<p>2 访问修饰符：native修饰符，即本地修饰符，说明该方法是使用其他语言在程序外部编写的。</p>
<h6 id="方法的重载-重写"><a href="#方法的重载-重写" class="headerlink" title="方法的重载/重写"></a>方法的重载/重写</h6><p>重载：同一个类中相同方法名不同的参数列表（参数类型、顺序、个数不同）。</p>
<p>重写：子类重写父类中的方法，与重载都是多态的体现，但是子类重写的方法与父类的方法返回值类型相同，方法名相同，参数列表也相同（参数类型、顺序和个数）。</p>
<p><strong>重写需要注意的是</strong></p>
<p>1 重写方法的权限不能缩小原方法的权限，只能相同或扩大</p>
<p>2 不能重写被final、static修饰的方法</p>
<p>3 重写方法中不能抛出比父类更多的异常</p>
<h6 id="方法参数传递方式"><a href="#方法参数传递方式" class="headerlink" title="方法参数传递方式"></a>方法参数传递方式</h6><p>值传递：对于基本数据类型作参数时，使用值传递，即传递的是基本数据类型值的副本，与原数据具有不同的地址空间。即在方法中修改该参数时不影响原数据。</p>
<p>地址传递：对于实参引用传递，参数接收到的是地址，在方法中修改该引用后会影响原数据。</p>
<h5 id="深入理解类及其成员"><a href="#深入理解类及其成员" class="headerlink" title="深入理解类及其成员"></a>深入理解类及其成员</h5><p>1 关于“句柄”的理解：在栈中定义的变量的值是一个堆内地址，该地址是数组或对象在堆中的存储位置，该堆内地址就是<strong>句柄</strong>。当超出栈中定义变量的作用域后，该栈中变量的空间会被释放（此刻堆中地址变成了不可达数组或对象），但是堆中的数组或对象仍存在，只会等待JVM自动回收机制回收。</p>
<h5 id="继承、抽象类和接口以及多态"><a href="#继承、抽象类和接口以及多态" class="headerlink" title="继承、抽象类和接口以及多态"></a>继承、抽象类和接口以及多态</h5><p>1 Object是顶级父类，它的equals方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里来看所有对象调用equals方法比较都是地址，但是String类重写了该方法，变成了比较两个字符串的内容是否相同。因此String.equals()是比较内容是否相同，而 == 是比较地址是否相同。</p>
<p>2 接口中只能有常量、抽象方法和默认方法（java8新特性）三种成员。且不能用private，protected或default修饰。即只能public。</p>
<h5 id="数组与集合"><a href="#数组与集合" class="headerlink" title="数组与集合"></a>数组与集合</h5><p>1 HashTable的键不能为空且具有唯一性，值可以为空。</p>
<h5 id="异常和异常处理"><a href="#异常和异常处理" class="headerlink" title="异常和异常处理"></a>异常和异常处理</h5><p><a href="https://jinzewang.github.io/2021/06/04/">一起看看Java异常</a></p>
<h5 id="输入输出与文件管理"><a href="#输入输出与文件管理" class="headerlink" title="输入输出与文件管理"></a>输入输出与文件管理</h5><p>1 字节流的基本单位是字节，而字符流的单位是字符，一个字符是2~3（汉语）个字节。</p>
<p>2 InputStream/OutputStream更加适用处理图片，音视频等二进制文件。</p>
<p>3 “缓冲流”中的缓冲区是从内存分出的区域，是为了解决内存与磁盘的速度匹配问题。</p>
<p>4 序列化是指把需要持久化的对象用字节流的形式保存到外部文件中，反序列化就是拿出来恢复成对象。<img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/javaFocus_Serializable_transient.png" style="zoom: 67%;" /></p>
<h5 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h5><h6 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h6><p>1 一般过程：加载驱动——&gt;通过DriverManager创建链接对象——&gt;通过该对象创建Statement接口引用——&gt;通过该引用执行相应的sql语句——&gt;（得到结果集ResultSet）——&gt;释放资源</p>
<p>2 MySQL的URL写法：jdbc:mysql://主机名或IP:端口//数据库</p>
<h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><h6 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h6><p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/MultiTreadProcess.png"></p>
<p><font color='red'>修改</font>：<font color='orange'>t2.join方法被调用后应该进入等待队列，因为据join源码可知，join底层调用的是wait方法</font>.</p>
<p><font color='red'>添加</font>：<font color='orange'>sleep、join、wait都会释放cpu资源，但是sleep和join不会释放锁，而wait会释放锁进入等待队列</font>。</p>
<p>1 多线程实现的两种方式，继承Thread和实现Runable接口，Thread实际上也实现了Runable接口。</p>
<p>2 匿名线程中run()方法只能调用一次</p>
<p>3 ReentrantLock可重入锁，遵循了有限等待原则</p>
<p>4 <strong>生产者消费者问题</strong>wait()，notify()，notifyAll().</p>
<h5 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h5>]]></content>
      <categories>
        <category>Java基础</category>
        <category>Java查漏补缺</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>重点</tag>
      </tags>
  </entry>
  <entry>
    <title>一起看看Java异常</title>
    <url>/2021/06/04/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>山穷水复疑无路，柳暗花明又一村。——《游山西村》 — 宋<code>·</code>陆游</p>
</blockquote>
<h5 id="异常总述"><a href="#异常总述" class="headerlink" title="异常总述"></a>异常总述</h5><h6 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h6><p>异常是指程序在执行期间发生了意外。常说代码不可能永无bug（bushi），异常就发生在代码的编写和执行上。Java提供了大量的内置异常类，我们可以将之归结为语法错误、运行时错误和逻辑错误。语法错误在常用的编辑器中就能发现，通常会以红线标识，运行时错误发生时会抛出异常信息到控制台，而逻辑错误是最难纠正的，需要对代码的逻辑进行重新梳理。</p>
<span id="more"></span>

<h6 id="异常和错误的区别"><a href="#异常和错误的区别" class="headerlink" title="异常和错误的区别"></a>异常和错误的区别</h6><p>错误是程序运行时遇到硬件或操作系统不能完成相应指令的错误。而异常是运行环境正常情况下遇到的运行时异常情况。</p>
<h5 id="异常总览"><a href="#异常总览" class="headerlink" title="异常总览"></a>异常总览</h5><p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/throwable.png"></p>
<p>总的来说，Java异常分为检查异常和非检查异常，即分为编译时检查异常和运行时异常。所有异常类都是包含在java.lang包下，顶级父类是Throwable，下有error和Exception两大分支。见图如下</p>
<img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/exception.png" style="zoom: 67%;" />

<img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/error.png" style="zoom:67%;" />

<p>我们通常所说异常是Exception下的异常类，当发生异常时，最常用的方法是toString()方法和printStackTrace()，前者打印描述当前异常信息到控制台，后者打印当前异常对象的堆栈使用轨迹。</p>
<h6 id="抛出和捕获异常"><a href="#抛出和捕获异常" class="headerlink" title="抛出和捕获异常"></a>抛出和捕获异常</h6><p>当程序运行时发生了异常，会被监听器监听到，于是形成了一个异常事件，异常事件会生成异常对象，将异常对象提交给JVM，它会找到相应的异常处理方法处理该异常对象，这个过程称为抛出异常。</p>
<p>当异常抛出后，虚拟机根据方法的调用链查找到异常处理的方法，同时把异常对象也给该方法，这个过程称为捕获异常。</p>
<h5 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h5><p>我们在平时编码过程中可能会常常遇见ClassNotFundException、IOException（受检查异常）和RuntimeException（非检查异常），RuntimeException下的子类我们可能会常遇到的有NullPointException，IndexOutOfBoundsException等，受检查异常和非检查异常都是继承自Exception，它们又有很多相应异常的实现。如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/RuntimeException.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/IOException.png"></p>
<h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><h6 id="异常处理过程"><a href="#异常处理过程" class="headerlink" title="异常处理过程"></a>异常处理过程</h6><p>JVM跟踪异常信息是根据方法调用栈去查找异常的，方法调用栈的各个方法组成了一个方法调用链，如下。<img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/methodUse.png" style="zoom:80%;" /></p>
<p>从main()方法开始一层一层的调用，JVM根据方法调用栈来跟踪，例如：当methodC方法正常执行完毕后就会将该方法从栈中删除；若是该方法产生了异常，看该方法室是否有try…catch…finally语句块处理该异常，若没有，就得在该方法头部加上thows关键字抛出异常，就将该异常交给上层调用方法，再看该方法能否处理异常，以此类推。若是所有方法都不能处理该异常，那么就会触发JVM调用printStackTrace()方法打印出异常堆栈使用轨迹，并终止程序运行。</p>
<h6 id="异常处理手段"><a href="#异常处理手段" class="headerlink" title="异常处理手段"></a>异常处理手段</h6><p><strong>try…catch…finally语句块处理</strong></p>
<p>语法说明：try语句块是处理可能会发生异常的代码，catch语句是捕获异常并对异常进行处理，finally也能被当做catch语句块处理，通常是用作“收尾工作”。此外要注意的是try必须与catch或finally之一或全部搭配使用，否则将会报错。当然，catch语句块可以是一个或多个，当catch语句块是零个时，必须有finally。</p>
<p><font color = "red">注意</font>：当catch语句中有break，continue，return语句时，当执行完这些语句后，若有finally语句，程序仍会执行完finally语句，然后才退出循环、继续循环和方法返回的操作。若是在catch中执行<font color = "red">System.exit(0)</font>后，此时不会执行finally语句（若有）。</p>
<p><strong>thows和thow处理</strong></p>
<p>1 thow通常在方法中，通过判断自己不能或不便处理异常时会通过thow抛出<strong>异常对象</strong>。抛给上层调用该方法的方法。</p>
<p>2 thows通常可以在后面跟多个异常类，在方法的头部，一旦发生异常抛给上层调用。</p>
<h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p>Java确实已经提供了大量的内置异常，但仍有一些特殊情况我们需要自定义异常，例如学生成绩大于100或年靓大于100等等。</p>
<p>自定义异常都需要继承Exception或其子类，当自定义的异常也可继承于自己定义的其他异常。同时，我们需要定义自定义异常类的数据成员和重写相应的方法。<font color = "red">需要注意的是</font>，自定义异常只能有thow抛出异常对象给上层调用处理，因此在编码时需要处理好对应的异常情况。</p>
<p>作者言：有遗漏或错误的地方，还请朋友们多多指正，感激不尽！</p>
<h5 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h5><p>[1] 崔淼、赵晓华  Java程序设计教程 [M] 北京：机械工业出版社 2019.5 ISBN 978-7-111-62467-7</p>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>Java异常</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Java关于锁的学习</title>
    <url>/2021/06/29/</url>
    <content><![CDATA[<hr>
<blockquote>
</blockquote>
<span id="more"></span>

<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>意义：同一个线程访问同步代码块时不需要进行加锁、解锁操作降低性能开销</p>
<p><strong>匿名偏向锁</strong>——即锁对象的mark world中没有存储线程ID</p>
<h5 id="偏向锁的加锁过程"><a href="#偏向锁的加锁过程" class="headerlink" title="偏向锁的加锁过程"></a>偏向锁的加锁过程</h5><h6 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h6><h6 id="当同一线程再次进入同步块"><a href="#当同一线程再次进入同步块" class="headerlink" title="当同一线程再次进入同步块"></a>当同一线程再次进入同步块</h6><h6 id="当不同线程进入同步代码块"><a href="#当不同线程进入同步代码块" class="headerlink" title="当不同线程进入同步代码块"></a>当不同线程进入同步代码块</h6><h5 id="偏向锁的解锁过程"><a href="#偏向锁的解锁过程" class="headerlink" title="偏向锁的解锁过程"></a>偏向锁的解锁过程</h5><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>同步代码块命令执行很快，线程进行自旋操作，等待获取锁，这样就能提高效率</p>
<h5 id="轻量级锁的加锁过程"><a href="#轻量级锁的加锁过程" class="headerlink" title="轻量级锁的加锁过程"></a>轻量级锁的加锁过程</h5><h5 id="轻量级锁的加锁过程-1"><a href="#轻量级锁的加锁过程-1" class="headerlink" title="轻量级锁的加锁过程"></a>轻量级锁的加锁过程</h5>]]></content>
      <categories>
        <category>Java基础</category>
        <category>Java中的锁</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制</title>
    <url>/2021/06/05/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>举杯邀明月，对影成三人。——《月下独酌四首》—唐<strong>·</strong>李白</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>Java反射机制</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机的内存模型</title>
    <url>/2021/10/07/</url>
    <content><![CDATA[<hr>
<blockquote>
</blockquote>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>为了Java程序能更好的管理内存，Java将运行时数据区分为程序计数器、虚拟机栈、本地方法栈、方法区和堆区五个空间。</p>
<span id="more"></span>

<h5 id="程序计数器（线程私有）"><a href="#程序计数器（线程私有）" class="headerlink" title="程序计数器（线程私有）"></a>程序计数器（线程私有）</h5><p>很小的内存空间，高速，在处理器内部，用于存储字节码指令的地址，该地址是程序将要执行的下一条指令地址，指示程序的完成。通过字节码解释器改变计数器的值选择下一条执行的指令。若执行的是本地方法计数器值则为空。</p>
<h5 id="虚拟机栈（线程私有）"><a href="#虚拟机栈（线程私有）" class="headerlink" title="虚拟机栈（线程私有）"></a>虚拟机栈（线程私有）</h5><h6 id="虚拟机栈的概述和异常"><a href="#虚拟机栈的概述和异常" class="headerlink" title="虚拟机栈的概述和异常"></a>虚拟机栈的概述和异常</h6><p>可以快速访问的内存空间，位于RAM，由多个栈帧形成虚拟机栈，栈帧中存储局部变量表、操作数栈、部分结果和返回地址等。每一次随着方法的调用入栈随着方法的返回出栈。每一个虚拟机栈都有一个栈指针，通过他的上下移动进行分配和回收内存。</p>
<p>分配栈时就会知道栈的大小，因此在不断栈帧入栈时就可能会发生栈溢出StackOverflowError，又当申请的栈大小超出一定内存大小时就会发生内存泄露OutOfMemoryError。</p>
<h6 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h6><p><strong>局部变量表</strong></p>
<p>局部变量表存储有基本类型或引用类型变量的地址。局部变量表被当做一个从0开始的数组，0是false，若是非int基本类型存储前则转化成int类型，而long和double占据了两个字长，局部变量则是通过数组下标访问。</p>
<p><strong>操作数栈</strong></p>
<p>操作数栈也是一个数字数组，但与局部变量表不同的是，它是根据push和pop进行入栈和出栈，而非通过下标访问。</p>
<p><strong>帧数据区</strong></p>
<p>主要作用：1、解析方法中的常量池 2、处理方会返回，恢复现场 3、处理调用过程中可能出现的异常，存在一个异常表，若有catch将异常处理，否则中断方法调用。</p>
<h5 id="本地方法栈（线程私有）"><a href="#本地方法栈（线程私有）" class="headerlink" title="本地方法栈（线程私有）"></a>本地方法栈（线程私有）</h5><p>与虚拟机栈类似，用于管理本地方法调用，但它拥有和虚拟机一样的权限，能访问虚拟机也能在本地堆区分配对象。可以看做是虚拟机栈的动态扩展。在Hotspot虚拟机中，是不区分虚拟机栈和本地方法栈的，因此也会抛出StackOverflow和OutOfMemory错误。</p>
<h5 id="方法区（线程共享）"><a href="#方法区（线程共享）" class="headerlink" title="方法区（线程共享）"></a>方法区（线程共享）</h5><p>方法区也一块独立的内存空间，保存的主要是类的元信息。这些信息主要来源于class文件。在Hotspot中，也被叫做永久区。主要包含：</p>
<p><strong>类型信息</strong>：类的完整名称、父类的完成名称、类的修饰符、类的直接接口类表</p>
<p><strong>常量池</strong>：包含类方法域信息等所引用的常量</p>
<p><strong>域信息</strong>：域名称、域类型、域修饰符</p>
<p><strong>方法信息</strong>：方法名，修饰符，返回类型、方法参数、操作数栈及 方法栈局部变量区的大小和异常表</p>
<p>同时，方法区也会被gc回收，主要回收的是常量池和类元数据。对于常量池可能因为常量的不断加入而引发OutOfMemory，所以也需要进行垃圾回收，回收没有被任何地方引用的常量。</p>
<h5 id="堆区（线程共享）"><a href="#堆区（线程共享）" class="headerlink" title="堆区（线程共享）"></a>堆区（线程共享）</h5><h6 id="堆的位置与优劣势"><a href="#堆的位置与优劣势" class="headerlink" title="堆的位置与优劣势"></a>堆的位置与优劣势</h6><p>堆位于RAM，是一种常用性内存池，存放所有Java对象。堆是在jvm启动时创建。</p>
<p><strong>优势</strong>：堆是运行时动态分配内存，同时也不需要知道数据的存活时间。具有很大的灵活性。</p>
<p><strong>劣势</strong>：访问速度慢，创建和回收对象都会消耗资源甚大。因此这也是gc回收时决定系统性能的瓶颈。</p>
<p>介绍GCIH：GCIH技术实现了堆外存储，即将大内存的Java对象移到堆外，GC不能直接管理GCIH内的对象，这样降低了GC回收频率和提升了GC回收效率。GCIH是基于OpenJDK深度定制的TaobaoJVM的一种创新。</p>
<h6 id="逃逸分析介绍"><a href="#逃逸分析介绍" class="headerlink" title="逃逸分析介绍"></a>逃逸分析介绍</h6><p><strong>逃逸分析定义</strong></p>
<p>计算机软件方面，逃逸分析指的是计算机语言编译器语言优化管理中，分析指针动态范围的方法。通俗点讲，如果一个对象的指针被多个方法或线程引用时，那我们可以称这个指针发生了逃逸 。<sup>[1]</sup></p>
<p><strong>常见逃逸分析发生场景</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">G</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">globalVariablePointerEscape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        b = <span class="keyword">new</span> B();<span class="comment">//给全局变量赋值，发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">methodPointerEscape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();<span class="comment">//方法返回值，发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">instancePassPointerEscape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        methodPointerEscape().printClassName(<span class="keyword">this</span>); <span class="comment">//实例引用发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printClassName</span><span class="params">(G g)</span> </span>&#123;</span><br><span class="line">        System.out.println(g.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>如何优化逃逸分析</strong></p>
<p>对栈重新分配，分析未逃逸变量，在栈中分配对象，这样就非逃逸对象的调用执行与回收就会随着栈的进行创建于销毁。同时也大大减少了堆中对象分配得负担。提升了Java运行的性能。</p>
<p><strong>逃逸优化</strong>：</p>
<ul>
<li><p>同步消除。线程同步的代价是相当高的，同步的后果是降低并发性和性能。逃逸分析可以判断出某个对象是否始终只被一个线程访问，如果只被一个线程访问，那么对该对象的同步操作就可以转化成没有同步保护的操作，这样就能大大提高并发性和性能。</p>
</li>
<li><p>矢量替代。逃逸分析方法如果发现对象的内存存储结构不需要连续进行的话，就可以将对象的部分甚至全部都保存在 CPU 寄存器内，这样能大大加快访问速度。  </p>
</li>
</ul>
<h6 id="堆的组成"><a href="#堆的组成" class="headerlink" title="堆的组成"></a>堆的组成</h6><p><strong>按代分</strong></p>
<p>将堆分为年轻代和年老代，年轻代又分为Eden区、from survivor和to survivor区，对象的出生在Eden区，survivor区是对象至少经过一次年轻代的垃圾回收，当此区对象经过指定年龄还未被回收就会进入年老代。而年老代存储大对象和经过多次垃圾回收的对象。</p>
<p><strong>按区分</strong></p>
<p>G1GC垃圾回收规则，将堆不再按代分，而是将堆分为一个个独立的区间。每一个区间的代不是固定的，根据区间内的对象进行判定区间属于哪个代。</p>
<p><sup>[1]</sup>：《深入理解JVM&amp;G1GC》</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>jvm内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>经典进程同步问题</title>
    <url>/2021/04/05/</url>
    <content><![CDATA[<hr>
<h5 id="一、生产者-消费者问题"><a href="#一、生产者-消费者问题" class="headerlink" title="一、生产者-消费者问题"></a>一、生产者-消费者问题</h5><h6 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h6><p>生产者生产产品到仓库（缓冲区），消费者从缓冲区获取产品，由于进程的异步性，对共享资源（缓冲区）访问是不可控的，因此我们把缓冲区作为临界资源，所以生产者、消费者和临界资源三者是一种互斥的制约关系。同时，消费者也需要等到生产者生产产品才能获取，因此这也是一个同步问题。</p>
<span id="more"></span>

<h6 id="1、使用记录型信号量解决"><a href="#1、使用记录型信号量解决" class="headerlink" title="1、使用记录型信号量解决"></a>1、使用记录型信号量解决</h6><p>记录性信号量主要是在整型信号量的基础上增加了用于记录等待进程的链表。由问题描述知我们需要解决同步和互斥两个问题。因此设置n为临界资源数量，构建数组存储资源，只有n&gt;0才能存入生产的产品，消费者也才能获取产品。使用mutex作为互斥信号量。</p>
<p>代码描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int in &#x3D; 0, out &#x3D; 0;</span><br><span class="line">item[n] buffer;</span><br><span class="line">semaphore mutex &#x3D; 1, empty &#x3D; n, full &#x3D; 0;</span><br><span class="line">void producer() &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        producer anitem nextp;</span><br><span class="line">        ...</span><br><span class="line">        wait(empty);</span><br><span class="line">        wait(mutex);</span><br><span class="line">        buffer[in] &#x3D; nextp;</span><br><span class="line">        in :&#x3D; (in+1)%n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(full);</span><br><span class="line">    &#125;while(TRUE);</span><br><span class="line">&#125;</span><br><span class="line">void consumer() &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        wait(full);</span><br><span class="line">        wait(mutex);</span><br><span class="line">        nextc &#x3D; buffer[out];</span><br><span class="line">        out &#x3D; (out+1)%n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(empty);</span><br><span class="line">    	consumer the item in nextc;</span><br><span class="line">    &#125;Wwhile(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：mutex作为互斥信号量，empty作为临界资源数量，full表示可用产品数量。producer函数中使用signal(full)表示对消费者可用数量的增加，以便消费者的wait(full)可继续运行，以此保证了同步。</p>
<p>注意的是：wait和signal是成对出现的，而mutex初始值为1，以保证互斥访问。并且，同步层是在互斥层“外”的，顺序不能变。</p>
<p><strong>为什么同步层是外层，而互斥层是内层？</strong></p>
<p>现假设互斥层为外层，同步层为内层。当生产者生产产品进入缓冲区，即调用wait(mutex)，此时锁定了临界资源以实现互斥，继续调用wait(empty)，若<strong>empty=0，</strong>那么将引起阻塞，临界资源将不可更改。此时的状态是：producer等着consumer将产品消费(signal(empty))，而consumer等着producer将占着的临界资源释放(即signal(mutex))，于是开始循环等待，形成了死锁。因此必须<strong>保证同步在外层，互斥在内层。</strong></p>
<h6 id="2、使用AND信号量解决"><a href="#2、使用AND信号量解决" class="headerlink" title="2、使用AND信号量解决"></a>2、使用AND信号量解决</h6><p>主要使用AND信号量的特性一次性解决生产者-消费者问题的同步性和互斥行。AND信号量特性是一次性把所有临界资源分配给一个进程（要么拥有全部，要么一个也不能拥有）。即为用Swait(empty, mutex)替代wait(empty)和wait(mutex)，用Ssignal(mutex, full)替代signal(mutex)和signal(full)。consumer中也是如此。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础知识点</title>
    <url>/2021/09/20/</url>
    <content><![CDATA[<hr>
<blockquote>
</blockquote>
<h6 id="where和having的区别？"><a href="#where和having的区别？" class="headerlink" title="where和having的区别？"></a>where和having的区别？</h6><p>where是在分组之前进行限定，若不满足where条件则不参与分组，having是在分组之后进行限定</p>
<p>where后面不能跟聚合函数，而having后面能跟聚合函数</p>
<span id="more"></span>

<h6 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h6><p>分页查询公式——开始索引=（当前页码 - 1）* 每页记录数量    limit （开始索引，页记录数）</p>
<h6 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h6><p><strong>添加/删除非空约束</strong></p>
<p>alter table 表名 modify 字段名 约束</p>
<p><strong>删除唯一约束</strong></p>
<p>alter table 表名 drop index 字段名</p>
<p><strong>添加唯一约束</strong></p>
<p>alter table 表名 modify 字段名 约束</p>
<p>添加外键 add constraint 约束名称 foreign key （外键字段名）references 外表名（外表字段名）</p>
<p><strong>级联操作</strong></p>
<p>在设置外键约束时进行级联设置constraint 约束名称 foreign key （外键字段名）references 外表名（外表字段名）on (delete/update) cascade</p>
<p>1 级联更新 on update cascade</p>
<p>2 级联删除 on delete cascade    (谨慎操作，影响性能和危险操作)</p>
<h6 id="多表之间关系"><a href="#多表之间关系" class="headerlink" title="多表之间关系"></a>多表之间关系</h6><p><strong>一对一</strong></p>
<p>对于两张表是一对一的关系，只需要对其中一张表设置一个唯一的外键指向另一张表，或者直接将两张表合为一张表</p>
<p><strong>一对多（多对一）</strong></p>
<p>需要在“多”的一方添加外键指向“一”，这个外键是另一张表的主键</p>
<p><strong>多对多</strong></p>
<p>多对多关系中，需要一个中间表来作为缓冲，这个中间表至少包含另外两张表的主键作为中间表的外键，同时应当<strong>注意</strong>中间表中的两个外键不能有相同的记录，否则没有意义</p>
<h6 id="三大范式（数据库的设计原则）"><a href="#三大范式（数据库的设计原则）" class="headerlink" title="三大范式（数据库的设计原则）"></a>三大范式（数据库的设计原则）</h6><p>1NF: 每一列都是不可分割的原子列</p>
<p>2NF: 在第一范式的基础上，消除部分函数依赖</p>
<p>3NF: 在第二范式的基础上，消除传递函数依赖</p>
<h6 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h6><p><strong>命令行方式</strong></p>
<p>备份：mysqldump -u -p 数据库名称 &gt; 保存路径</p>
<p>还原：1创建数据库——2 source 路径</p>
<p><strong>图形化界面</strong></p>
<p>备份：</p>
<p>还原：</p>
<h6 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h6><p>内连接查询：</p>
<p>显示内连接查询 {</p>
<p>​    select from inner join  on</p>
<p>​    select from join  on</p>
<p>}</p>
<p>外连接查询：{</p>
<p>​    左外连接 select from left join on</p>
<p>​    右外连接</p>
<p>}</p>
<p>子查询：</p>
<h6 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h6><p><strong>基本概念</strong></p>
<p><strong>命令</strong>：</p>
<p>开启事务：start transaction</p>
<p>事务回滚：rollback</p>
<p>事务提交：commit {</p>
<p>​    手动提交&lt;——&gt;自动提交（查询提交方式select @@autocommit; 修改提交方式set @@autocommit）</p>
<p>}</p>
<p>{查看数据库隔离级别select @@tx_isolation；修改数据库隔离级别set global transaction isolation level 隔离级别字符串}</p>
<p>事务四大特性：</p>
<p>原子性</p>
<p>持久性</p>
<p>隔离性</p>
<p>一致性</p>
<p>事务的隔离级别：</p>
<p>1 read uncommitted 读未提交（产生问题：脏读、不可重复读（虚读）、幻读）</p>
<p>2 read committed 读已提交    产生问题：虚读、幻读    （oracle默认级别）</p>
<p>3 repeatable read 可重复读    产生问题：幻读    （MySQL默认级别）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提问：为什么上了写锁（写操作），别的事务还可以读操作？</span><br><span class="line"></span><br><span class="line">因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。</span><br></pre></td></tr></table></figure>

<p>4  serializable 串行化    解决所有问题</p>
<h5 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h5><h6 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h6><p>在mysql数据库中的user表</p>
<p>增：CREATE USER ‘用户名‘@’主机名’ IDENTIFIED BY ‘密码’;</p>
<p>删：DROP USER ‘用户名‘@’主机名’;</p>
<p>改：</p>
<p>查：1、切换到mysql数据库 use mysql，2、查询user表 SELECT * FROM USER;  % 表示通配符，通配任意主机</p>
<p><strong>忘记root用户的密码了应该怎么办？</strong></p>
<blockquote>
<p>1、用管理员运行cmd——&gt;net stop mysql 停止mysql服务</p>
<p>2、用无验证方式启动mysql服务: mysqld –skip-grant-tables</p>
<p>3、打开新的cmd窗口，直接输入mysql命令，回车。即登录成功</p>
<p>4、use mysql;</p>
<p>5、update user set password = password(‘root’) where user = ‘root’</p>
<p>6、关闭两个窗口</p>
<p>7、打开任务管理器，手动结束mysqld.exe进程</p>
<p>8、用管理员cmd启动mysql服务</p>
<p>9、使用新密码登录</p>
</blockquote>
<h6 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h6><p><strong>查询权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>授予权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;</span><br></pre></td></tr></table></figure>

<p>授予全部权限（通配）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON *.* TO &#39;用户名&#39;@&#39;主机名&#39;</span><br></pre></td></tr></table></figure>

<p><strong>撤销权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>祝福</title>
    <url>/2021/04/05/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cf28069566f3df120a9e407baea6029d6bda028e179259635663447d6a36d2b2">91a3f98ed694b0f3ce330b314503f44343c7689568d8c817b41aee8231c1b8ac2c45eee1ff1957654ce39fa614aa72d62edddab2026368902dbe118138dbcebcff0e82ae177ee640a70739f9e2e38d5eabb0f899fab79883e0d15f04d7f696d66365aa378616d4471ab6b706ebbb2eff</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您需要一扇门的钥匙。。。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>感想</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之TCP的三次握手、四次挥手</title>
    <url>/2021/07/01/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>曾今沧海难为水，除去巫山不是云。  ——《离思》<strong>·</strong>元稹</p>
</blockquote>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>我们通常所说TCP的三次握手、四次挥手实际上是指TCP的建立连接和释放连接。TCP是计算机网络中运输层的一种可靠传输协议，属于面向连接的，它传输的单位是报文段。</p>
<span id="more"></span>

<h5 id="TCP建立连接（三次握手）"><a href="#TCP建立连接（三次握手）" class="headerlink" title="TCP建立连接（三次握手）"></a>TCP建立连接（三次握手）</h5><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><p>1 TCP建立连接采用客户服务器模式，主动发起请求的是客户端，这里我们置为A，被动接受请求的是服务端，这里我们置为B。</p>
<p>2 连接的两端实质是两个进程，三次握手实际是传输了三次报文段，在连接的过程中两方确定好他们进行通信的一些参数，例如最大窗口值，时间戳选项服务质量等<sup>[1]</sup>。</p>
<p>3 最开始，服务器创建好传输控制块TCP，准备监听客户端进程的请求，自己进入监听（LISTEN）状态。若客户端需要与服务器建立连接，它也首先创建TCP，然后发送第一个报文段。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/threeWayHandshake.png"></p>
<center><font size = 2>图1 三次握手</font></center>

<h6 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h6><p>当确定A要和B建立连接时，A向B发送第一个报文段，把该报文段SYN标志位设为1，表示该报文段是一个连接请求报文段；把序号seq设为x，表示A发送的初始编号是x。该报文段是不携带数据的，但会消耗一个序号，此时A是SYN-SENT状态（同步已发送）</p>
<h6 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h6><p>当B收到A发来的连接请求报文段后，若是同意连接请求，那么会发送连接接受报文段，该报文段首部中SYN=1，表示该报文段是连接接受报文段，ACK=1表示该确认报文段有效，ack=x+1表示B希望A发送的下一个序号，seq=y表示B发送的消耗序号，该报文段也是不携带数据的，只消耗掉一个序号。然后B进入SYN-REVD状态。</p>
<h6 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h6><p>当A收到B发来的连接接受报文段后，需要再次向B发送确认报文段，此时并通知A的上层应用进程，TCP已经建立，可以开始传输数据了。而A发送的确认报文段首部中，seq=x+1表示A发送的字节流中第一个序号是x+1，并希望收到的下一个确认号是y+1，即把ack设为y+1。此报文段可以携带数据也可不携带数据，若不携带则不消耗序号，即可能下一个报文段序号仍可能是x+1，此时A进入ESTAB-LISTEN状态。</p>
<h6 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h6><p>当B收到A发来的确认报文段后，自己也进入ESTAB-LISTEN状态。A与B开始进行数据传输。</p>
<p><strong>A再次发送确认报文段的目的</strong>（第三次握手目的）</p>
<p>为了防止已失效的连接请求报文段又发送一次给B，这种情况可能是由于A原来发送的连接请求报文段丢失或是其他异常情况。</p>
<h5 id="TCP释放连接（四次挥手）"><a href="#TCP释放连接（四次挥手）" class="headerlink" title="TCP释放连接（四次挥手）"></a>TCP释放连接（四次挥手）</h5><p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/fourWave.png"></p>
<center><font size=2>图2 四次挥手</font></center>

<p>当数据传输结束后，A和B都可以释放连接，若A要释放连接，首先向TCP发送连接释放报文段，并停止发送数据，应用进程主动关闭TCP连接。</p>
<h6 id="第一次挥手"><a href="#第一次挥手" class="headerlink" title="第一次挥手"></a>第一次挥手</h6><p>A把连接释放报文段发送给B，并把报文段首部FIN=1，当前将不再发送数据，并要求B释放连接；同时发送自己的序号seq=u。</p>
<h6 id="第二次挥手"><a href="#第二次挥手" class="headerlink" title="第二次挥手"></a>第二次挥手</h6><p>B收到A发来的连接释放报文段后，将会通知上层应用进程，并发送确认报文段，设置报文段首部ACK=1，表示报文段确认号是有效的，设置确认号ack=u+1，还发送自己的序号v。此时A——&gt;B这个方向的连接关闭，TCP处于<font color="red">半关闭状态</font>，若是B还要发送数据给A，A还是得接着。</p>
<h6 id="第三次挥手"><a href="#第三次挥手" class="headerlink" title="第三次挥手"></a>第三次挥手</h6><p>若B不发送数据给A，那就通知进程关闭TCP连接，发送连接释放报文段给A，报文段首部FIN=1，表示不再发数据，连接释放，同时发送自己的序号w，确认号ack=u+1，并把ACK标志位置为1，表示该确认号是有效的。</p>
<h6 id="第四次挥手"><a href="#第四次挥手" class="headerlink" title="第四次挥手"></a>第四次挥手</h6><p>A收到B发来的连接释放报文段后，仍需发送确认报文段给B，表示他知道了。首部各字段就不再赘述。同时此刻A还需等待等待时间2MSL时间过后才真正释放掉。</p>
<p><strong>2MSL</strong>它是时间等待计时器设置时间，MSL是最长报文段寿命。</p>
<p><strong>设置等待时间为2MSL的原因：</strong></p>
<p>1 为了保证A发送的最后一个ACK报文段能到达B。</p>
<p>2 为了防止上面提到的“已失效的连接请求报文段”出现在此连接中<sup>[1]</sup>。</p>
<h5 id="TCP的有限状态机"><a href="#TCP的有限状态机" class="headerlink" title="TCP的有限状态机"></a>TCP的有限状态机</h5><p><img src="https://cdn.jsdelivr.net/gh/Jinzewang/PictureForBlog/img/TCPLimitedStateMachine.png"></p>
<h6 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h6><p>1 粗实线箭头表示客户进程的正常变迁</p>
<p>2 粗虚线箭头表示对服务器进程的正常变迁</p>
<p>3 细线箭头表示异常变迁</p>
<p>该图能很好的表现TCP连接各个状态的及其之间的关系</p>
<h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p>[1] 谢希仁  计算机网络（第七版） [M] 北京：电子工业出版社 2017.1 ISBN 978-7-121-30295-4</p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>三次握手四次挥手</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer学习笔记</title>
    <url>/2021/09/21/</url>
    <content><![CDATA[<hr>
<blockquote>
</blockquote>
<h5 id="第14题-剪绳子"><a href="#第14题-剪绳子" class="headerlink" title="第14题  剪绳子"></a>第14题  剪绳子</h5><p><strong>结论1</strong>：任何一个正整数都可以有无数个2或3组成，且由所有2或3得到的乘积比其他子数的乘积更大，这个最大积应由尽可能多的3相乘，在没有3的情况下再使用2相乘。</p>
<p><strong>结论2</strong>：公式（x*y）% p =  （(x%p) * (y%p)）% p</p>
]]></content>
      <categories>
        <category>剑指offer</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>算法</tag>
        <tag>数论</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之网络层</title>
    <url>/2021/09/12/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>IP</tag>
      </tags>
  </entry>
</search>
